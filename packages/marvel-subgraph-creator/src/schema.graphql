extend schema @link(
    url: "https://specs.apollo.dev/federation/v2.0",
    import: ["@key", "@shareable"]
)

type Query {
    creatorById(id: ID!): CreatorResponse!
    creators: CreatorResponse!
}

type CreatorResponse implements QueryResponse {
    code: Int
    status: String
    copyright: String
    attributionText: String
    attributionHTML: String
    etag: String
    data: CreatorDataContainer
}

type CreatorDataContainer implements DataContainer {
    "The requested offset (number of skipped results) of the call"
    offset: Int
    "The requested result limit"
    limit: Int
    "The total number of resources available given the current filter set"
    total: Int
    "The total number of results returned by this call"
    count: Int
    "The list of characters returned by the call"
    results: [Creator]
}

type Creator implements BaseEntity @key(fields: "id") @key(fields: "resourceURI") {
    "The unique ID of the series resource"
    id: ID!
    "The canonical URL identifier for this resource"
    resourceURI: String!
    "The first name of the creator"
    firstName: String
    "The middle name of the creator"
    middleName: String
    "The last name of the creator"
    lastName: String
    "The suffix or honorific for the creator"
    suffix: String
    "The full name of the creator (a space-separated concatenation of the above four fields)"
    fullName: String
    "A set of public web site URLs for the resource"
    urls: [Url!]
    "The date the resource was most recently modified"
    modified: String
    "The representative image for this creator"
    thumbnail: Image
    "A resource list containing the comics which feature work by this creator"
    comics: ComicList
    "A resource list containing the stories which feature work by this creator"
    stories: StoryList
    "A resource list containing the events which feature work by this creator"
    events: EventList
    "A resource list containing the series which feature work by this creator"
    series: SeriesList
}

### Shared types

interface QueryResponse {
    "The HTTP status code of the returned result"
    code: Int
    "A string description of the call status"
    status: String
    "The copyright notice for the returned result"
    copyright: String
    """
    The attribution notice for this result. Please display either this notice
    or the contents of the attributionHTML field on all screens which contain
    data from the Marvel Comics API
    """
    attributionText: String
    """
    An HTML representation of the attribution notice for this result.
    Please display either this notice or the contents of the attributionText
    field on all screens which contain data from the Marvel Comics API
    """
    attributionHTML: String
    "A digest value of the content returned by the call"
    etag: String
    "The results returned by the call"
    data: DataContainer
}

interface DataContainer {
    "The requested offset (number of skipped results) of the call"
    offset: Int
    "The requested result limit"
    limit: Int
    "The total number of resources available given the current filter set"
    total: Int
    "The total number of results returned by this call"
    count: Int
    "The list of entities returned by the call"
    results: [BaseEntity]
}

interface BaseEntity {
    "The unique ID of the resource"
    id: ID!
    "The path to the individual entity resource"
    resourceURI: String!
}

interface List {
    "The number of total available issues in this list. Will always be greater than or equal to the 'returned' value"
    available: Int
    "The number of issues returned in this collection (up to 20)"
    returned: Int
    "The path to the full list of issues in this collection"
    collectionURI: String
    "The list of returned issues in this collection"
    items: [BaseEntity!]
}

type Url @shareable {
    "A text identifier for the URL"
    type: String
    "A full URL (including scheme, domain, and path)"
    url: String
}

type Image @shareable {
    "A file path to the resources image"
    path: String
    "The file extension for the resource image"
    extension: String
}

### Comic

type ComicList implements List @shareable {
    "The number of total available issues in this list. Will always be greater than or equal to the 'returned' value"
    available: Int
    "The number of issues returned in this collection (up to 20)"
    returned: Int
    "The path to the full list of issues in this collection"
    collectionURI: String
    "The list of returned issues in this collection"
    items: [Comic!]
}

type Comic implements BaseEntity @key(fields: "id") @key(fields: "resourceURI") {
    id: ID!
    "The canonical URL identifier for this resource"
    resourceURI: String!
}

### Character

type CharacterList implements List @shareable {
    "The number of total available issues in this list. Will always be greater than or equal to the 'returned' value"
    available: Int
    "The number of issues returned in this collection (up to 20)"
    returned: Int
    "The path to the full list of issues in this collection"
    collectionURI: String
    "The list of returned issues in this collection"
    items: [Character!]
}

type Character implements BaseEntity @key(fields: "id") @key(fields: "resourceURI") {
    id: ID!
    "The canonical URL identifier for this resource"
    resourceURI: String!
}

### Series

type SeriesList implements List @shareable {
    "The number of total available issues in this list. Will always be greater than or equal to the 'returned' value"
    available: Int
    "The number of issues returned in this collection (up to 20)"
    returned: Int
    "The path to the full list of issues in this collection"
    collectionURI: String
    "The list of returned issues in this collection"
    items: [Series!]
}

type Series implements BaseEntity @key(fields: "id") @key(fields: "resourceURI") {
    id: ID!
    "The path to the individual entity resource"
    resourceURI: String!
}

### Event

type EventList implements List @shareable {
    "The number of total available issues in this list. Will always be greater than or equal to the 'returned' value"
    available: Int
    "The number of issues returned in this collection (up to 20)"
    returned: Int
    "The path to the full list of issues in this collection"
    collectionURI: String
    "The list of returned issues in this collection"
    items: [Event!]
}

type Event implements BaseEntity @key(fields: "id") @key(fields: "resourceURI") {
    id: ID!
    "The path to the individual entity resource"
    resourceURI: String!
}

### Story

type StoryList implements List @shareable {
    "The number of total available issues in this list. Will always be greater than or equal to the 'returned' value"
    available: Int
    "The number of issues returned in this collection (up to 20)"
    returned: Int
    "The path to the full list of issues in this collection"
    collectionURI: String
    "The list of returned issues in this collection"
    items: [Story!]
}

type Story implements BaseEntity @key(fields: "id") @key(fields: "resourceURI") {
    id: ID!
    "The path to the individual entity resource"
    resourceURI: String!
}